# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import easycrawler.protos.easycrawler_pb2 as easycrawler__pb2


class EasyCrawlerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Push = channel.stream_unary(
                '/easycrawler.EasyCrawlerService/Push',
                request_serializer=easycrawler__pb2.Chunk.SerializeToString,
                response_deserializer=easycrawler__pb2.Result.FromString,
                )
        self.Pull = channel.unary_stream(
                '/easycrawler.EasyCrawlerService/Pull',
                request_serializer=easycrawler__pb2.Message.SerializeToString,
                response_deserializer=easycrawler__pb2.Chunk.FromString,
                )
        self.AddMeta = channel.unary_unary(
                '/easycrawler.EasyCrawlerService/AddMeta',
                request_serializer=easycrawler__pb2.Message.SerializeToString,
                response_deserializer=easycrawler__pb2.Result.FromString,
                )
        self.GetMeta = channel.unary_unary(
                '/easycrawler.EasyCrawlerService/GetMeta',
                request_serializer=easycrawler__pb2.Message.SerializeToString,
                response_deserializer=easycrawler__pb2.Result.FromString,
                )
        self.OnResult = channel.unary_unary(
                '/easycrawler.EasyCrawlerService/OnResult',
                request_serializer=easycrawler__pb2.Message.SerializeToString,
                response_deserializer=easycrawler__pb2.Result.FromString,
                )
        self.GetResult = channel.unary_unary(
                '/easycrawler.EasyCrawlerService/GetResult',
                request_serializer=easycrawler__pb2.Message.SerializeToString,
                response_deserializer=easycrawler__pb2.Result.FromString,
                )
        self.DelClient = channel.unary_unary(
                '/easycrawler.EasyCrawlerService/DelClient',
                request_serializer=easycrawler__pb2.Message.SerializeToString,
                response_deserializer=easycrawler__pb2.Result.FromString,
                )


class EasyCrawlerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Push(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMeta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMeta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EasyCrawlerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Push': grpc.stream_unary_rpc_method_handler(
                    servicer.Push,
                    request_deserializer=easycrawler__pb2.Chunk.FromString,
                    response_serializer=easycrawler__pb2.Result.SerializeToString,
            ),
            'Pull': grpc.unary_stream_rpc_method_handler(
                    servicer.Pull,
                    request_deserializer=easycrawler__pb2.Message.FromString,
                    response_serializer=easycrawler__pb2.Chunk.SerializeToString,
            ),
            'AddMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMeta,
                    request_deserializer=easycrawler__pb2.Message.FromString,
                    response_serializer=easycrawler__pb2.Result.SerializeToString,
            ),
            'GetMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMeta,
                    request_deserializer=easycrawler__pb2.Message.FromString,
                    response_serializer=easycrawler__pb2.Result.SerializeToString,
            ),
            'OnResult': grpc.unary_unary_rpc_method_handler(
                    servicer.OnResult,
                    request_deserializer=easycrawler__pb2.Message.FromString,
                    response_serializer=easycrawler__pb2.Result.SerializeToString,
            ),
            'GetResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResult,
                    request_deserializer=easycrawler__pb2.Message.FromString,
                    response_serializer=easycrawler__pb2.Result.SerializeToString,
            ),
            'DelClient': grpc.unary_unary_rpc_method_handler(
                    servicer.DelClient,
                    request_deserializer=easycrawler__pb2.Message.FromString,
                    response_serializer=easycrawler__pb2.Result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'easycrawler.EasyCrawlerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EasyCrawlerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Push(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/easycrawler.EasyCrawlerService/Push',
            easycrawler__pb2.Chunk.SerializeToString,
            easycrawler__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/easycrawler.EasyCrawlerService/Pull',
            easycrawler__pb2.Message.SerializeToString,
            easycrawler__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/easycrawler.EasyCrawlerService/AddMeta',
            easycrawler__pb2.Message.SerializeToString,
            easycrawler__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/easycrawler.EasyCrawlerService/GetMeta',
            easycrawler__pb2.Message.SerializeToString,
            easycrawler__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/easycrawler.EasyCrawlerService/OnResult',
            easycrawler__pb2.Message.SerializeToString,
            easycrawler__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/easycrawler.EasyCrawlerService/GetResult',
            easycrawler__pb2.Message.SerializeToString,
            easycrawler__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/easycrawler.EasyCrawlerService/DelClient',
            easycrawler__pb2.Message.SerializeToString,
            easycrawler__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
